/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.j2eecn.mcat.model.impl;

import com.j2eecn.mcat.model.MeCategory;
import com.j2eecn.mcat.model.MeCategoryModel;
import com.j2eecn.mcat.model.MeCategorySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MeCategory service. Represents a row in the &quot;MeCategory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.j2eecn.mcat.model.MeCategoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MeCategoryImpl}.
 * </p>
 *
 * @author Administrator
 * @see MeCategoryImpl
 * @see com.j2eecn.mcat.model.MeCategory
 * @see com.j2eecn.mcat.model.MeCategoryModel
 * @generated
 */
@JSON(strict = true)
public class MeCategoryModelImpl extends BaseModelImpl<MeCategory>
	implements MeCategoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a me category model instance should use the {@link com.j2eecn.mcat.model.MeCategory} interface instead.
	 */
	public static final String TABLE_NAME = "MeCategory";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "catId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "desc_", Types.VARCHAR },
			{ "remark", Types.VARCHAR },
			{ "useStatus", Types.INTEGER },
			{ "code_", Types.VARCHAR },
			{ "mngId", Types.BIGINT },
			{ "mngName", Types.BIGINT },
			{ "codeAndName", Types.VARCHAR },
			{ "fullName", Types.VARCHAR },
			{ "assetCatId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table MeCategory (uuid_ VARCHAR(75) null,catId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,name VARCHAR(75) null,desc_ VARCHAR(75) null,remark VARCHAR(75) null,useStatus INTEGER,code_ VARCHAR(75) null,mngId LONG,mngName LONG,codeAndName VARCHAR(75) null,fullName VARCHAR(75) null,assetCatId LONG)";
	public static final String TABLE_SQL_DROP = "drop table MeCategory";
	public static final String ORDER_BY_JPQL = " ORDER BY meCategory.catId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MeCategory.catId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.j2eecn.mcat.model.MeCategory"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.j2eecn.mcat.model.MeCategory"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.j2eecn.mcat.model.MeCategory"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long UUID_COLUMN_BITMASK = 4L;
	public static long CATID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MeCategory toModel(MeCategorySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MeCategory model = new MeCategoryImpl();

		model.setUuid(soapModel.getUuid());
		model.setCatId(soapModel.getCatId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setName(soapModel.getName());
		model.setDesc(soapModel.getDesc());
		model.setRemark(soapModel.getRemark());
		model.setUseStatus(soapModel.getUseStatus());
		model.setCode(soapModel.getCode());
		model.setMngId(soapModel.getMngId());
		model.setMngName(soapModel.getMngName());
		model.setCodeAndName(soapModel.getCodeAndName());
		model.setFullName(soapModel.getFullName());
		model.setAssetCatId(soapModel.getAssetCatId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MeCategory> toModels(MeCategorySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MeCategory> models = new ArrayList<MeCategory>(soapModels.length);

		for (MeCategorySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.j2eecn.mcat.model.MeCategory"));

	public MeCategoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _catId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCatId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _catId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MeCategory.class;
	}

	@Override
	public String getModelClassName() {
		return MeCategory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("catId", getCatId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("name", getName());
		attributes.put("desc", getDesc());
		attributes.put("remark", getRemark());
		attributes.put("useStatus", getUseStatus());
		attributes.put("code", getCode());
		attributes.put("mngId", getMngId());
		attributes.put("mngName", getMngName());
		attributes.put("codeAndName", getCodeAndName());
		attributes.put("fullName", getFullName());
		attributes.put("assetCatId", getAssetCatId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long catId = (Long)attributes.get("catId");

		if (catId != null) {
			setCatId(catId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String desc = (String)attributes.get("desc");

		if (desc != null) {
			setDesc(desc);
		}

		String remark = (String)attributes.get("remark");

		if (remark != null) {
			setRemark(remark);
		}

		Integer useStatus = (Integer)attributes.get("useStatus");

		if (useStatus != null) {
			setUseStatus(useStatus);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		Long mngId = (Long)attributes.get("mngId");

		if (mngId != null) {
			setMngId(mngId);
		}

		Long mngName = (Long)attributes.get("mngName");

		if (mngName != null) {
			setMngName(mngName);
		}

		String codeAndName = (String)attributes.get("codeAndName");

		if (codeAndName != null) {
			setCodeAndName(codeAndName);
		}

		String fullName = (String)attributes.get("fullName");

		if (fullName != null) {
			setFullName(fullName);
		}

		Long assetCatId = (Long)attributes.get("assetCatId");

		if (assetCatId != null) {
			setAssetCatId(assetCatId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getCatId() {
		return _catId;
	}

	@Override
	public void setCatId(long catId) {
		_catId = catId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getDesc() {
		if (_desc == null) {
			return StringPool.BLANK;
		}
		else {
			return _desc;
		}
	}

	@Override
	public void setDesc(String desc) {
		_desc = desc;
	}

	@JSON
	@Override
	public String getRemark() {
		if (_remark == null) {
			return StringPool.BLANK;
		}
		else {
			return _remark;
		}
	}

	@Override
	public void setRemark(String remark) {
		_remark = remark;
	}

	@JSON
	@Override
	public int getUseStatus() {
		return _useStatus;
	}

	@Override
	public void setUseStatus(int useStatus) {
		_useStatus = useStatus;
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_code = code;
	}

	@JSON
	@Override
	public long getMngId() {
		return _mngId;
	}

	@Override
	public void setMngId(long mngId) {
		_mngId = mngId;
	}

	@JSON
	@Override
	public long getMngName() {
		return _mngName;
	}

	@Override
	public void setMngName(long mngName) {
		_mngName = mngName;
	}

	@JSON
	@Override
	public String getCodeAndName() {
		if (_codeAndName == null) {
			return StringPool.BLANK;
		}
		else {
			return _codeAndName;
		}
	}

	@Override
	public void setCodeAndName(String codeAndName) {
		_codeAndName = codeAndName;
	}

	@JSON
	@Override
	public String getFullName() {
		if (_fullName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fullName;
		}
	}

	@Override
	public void setFullName(String fullName) {
		_fullName = fullName;
	}

	@JSON
	@Override
	public long getAssetCatId() {
		return _assetCatId;
	}

	@Override
	public void setAssetCatId(long assetCatId) {
		_assetCatId = assetCatId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				MeCategory.class.getName()));
	}

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #isApproved}
	 */
	@Override
	public boolean getApproved() {
		return isApproved();
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			MeCategory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MeCategory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MeCategory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MeCategoryImpl meCategoryImpl = new MeCategoryImpl();

		meCategoryImpl.setUuid(getUuid());
		meCategoryImpl.setCatId(getCatId());
		meCategoryImpl.setGroupId(getGroupId());
		meCategoryImpl.setCompanyId(getCompanyId());
		meCategoryImpl.setUserId(getUserId());
		meCategoryImpl.setUserName(getUserName());
		meCategoryImpl.setCreateDate(getCreateDate());
		meCategoryImpl.setModifiedDate(getModifiedDate());
		meCategoryImpl.setStatus(getStatus());
		meCategoryImpl.setStatusByUserId(getStatusByUserId());
		meCategoryImpl.setStatusByUserName(getStatusByUserName());
		meCategoryImpl.setStatusDate(getStatusDate());
		meCategoryImpl.setName(getName());
		meCategoryImpl.setDesc(getDesc());
		meCategoryImpl.setRemark(getRemark());
		meCategoryImpl.setUseStatus(getUseStatus());
		meCategoryImpl.setCode(getCode());
		meCategoryImpl.setMngId(getMngId());
		meCategoryImpl.setMngName(getMngName());
		meCategoryImpl.setCodeAndName(getCodeAndName());
		meCategoryImpl.setFullName(getFullName());
		meCategoryImpl.setAssetCatId(getAssetCatId());

		meCategoryImpl.resetOriginalValues();

		return meCategoryImpl;
	}

	@Override
	public int compareTo(MeCategory meCategory) {
		long primaryKey = meCategory.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MeCategory)) {
			return false;
		}

		MeCategory meCategory = (MeCategory)obj;

		long primaryKey = meCategory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MeCategoryModelImpl meCategoryModelImpl = this;

		meCategoryModelImpl._originalUuid = meCategoryModelImpl._uuid;

		meCategoryModelImpl._originalGroupId = meCategoryModelImpl._groupId;

		meCategoryModelImpl._setOriginalGroupId = false;

		meCategoryModelImpl._originalCompanyId = meCategoryModelImpl._companyId;

		meCategoryModelImpl._setOriginalCompanyId = false;

		meCategoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MeCategory> toCacheModel() {
		MeCategoryCacheModel meCategoryCacheModel = new MeCategoryCacheModel();

		meCategoryCacheModel.uuid = getUuid();

		String uuid = meCategoryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			meCategoryCacheModel.uuid = null;
		}

		meCategoryCacheModel.catId = getCatId();

		meCategoryCacheModel.groupId = getGroupId();

		meCategoryCacheModel.companyId = getCompanyId();

		meCategoryCacheModel.userId = getUserId();

		meCategoryCacheModel.userName = getUserName();

		String userName = meCategoryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			meCategoryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			meCategoryCacheModel.createDate = createDate.getTime();
		}
		else {
			meCategoryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			meCategoryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			meCategoryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		meCategoryCacheModel.status = getStatus();

		meCategoryCacheModel.statusByUserId = getStatusByUserId();

		meCategoryCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = meCategoryCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			meCategoryCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			meCategoryCacheModel.statusDate = statusDate.getTime();
		}
		else {
			meCategoryCacheModel.statusDate = Long.MIN_VALUE;
		}

		meCategoryCacheModel.name = getName();

		String name = meCategoryCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			meCategoryCacheModel.name = null;
		}

		meCategoryCacheModel.desc = getDesc();

		String desc = meCategoryCacheModel.desc;

		if ((desc != null) && (desc.length() == 0)) {
			meCategoryCacheModel.desc = null;
		}

		meCategoryCacheModel.remark = getRemark();

		String remark = meCategoryCacheModel.remark;

		if ((remark != null) && (remark.length() == 0)) {
			meCategoryCacheModel.remark = null;
		}

		meCategoryCacheModel.useStatus = getUseStatus();

		meCategoryCacheModel.code = getCode();

		String code = meCategoryCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			meCategoryCacheModel.code = null;
		}

		meCategoryCacheModel.mngId = getMngId();

		meCategoryCacheModel.mngName = getMngName();

		meCategoryCacheModel.codeAndName = getCodeAndName();

		String codeAndName = meCategoryCacheModel.codeAndName;

		if ((codeAndName != null) && (codeAndName.length() == 0)) {
			meCategoryCacheModel.codeAndName = null;
		}

		meCategoryCacheModel.fullName = getFullName();

		String fullName = meCategoryCacheModel.fullName;

		if ((fullName != null) && (fullName.length() == 0)) {
			meCategoryCacheModel.fullName = null;
		}

		meCategoryCacheModel.assetCatId = getAssetCatId();

		return meCategoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(45);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", catId=");
		sb.append(getCatId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", desc=");
		sb.append(getDesc());
		sb.append(", remark=");
		sb.append(getRemark());
		sb.append(", useStatus=");
		sb.append(getUseStatus());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", mngId=");
		sb.append(getMngId());
		sb.append(", mngName=");
		sb.append(getMngName());
		sb.append(", codeAndName=");
		sb.append(getCodeAndName());
		sb.append(", fullName=");
		sb.append(getFullName());
		sb.append(", assetCatId=");
		sb.append(getAssetCatId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(70);

		sb.append("<model><model-name>");
		sb.append("com.j2eecn.mcat.model.MeCategory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>catId</column-name><column-value><![CDATA[");
		sb.append(getCatId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>desc</column-name><column-value><![CDATA[");
		sb.append(getDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remark</column-name><column-value><![CDATA[");
		sb.append(getRemark());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>useStatus</column-name><column-value><![CDATA[");
		sb.append(getUseStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mngId</column-name><column-value><![CDATA[");
		sb.append(getMngId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mngName</column-name><column-value><![CDATA[");
		sb.append(getMngName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codeAndName</column-name><column-value><![CDATA[");
		sb.append(getCodeAndName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fullName</column-name><column-value><![CDATA[");
		sb.append(getFullName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assetCatId</column-name><column-value><![CDATA[");
		sb.append(getAssetCatId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MeCategory.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MeCategory.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _catId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private String _statusByUserName;
	private Date _statusDate;
	private String _name;
	private String _desc;
	private String _remark;
	private int _useStatus;
	private String _code;
	private long _mngId;
	private long _mngName;
	private String _codeAndName;
	private String _fullName;
	private long _assetCatId;
	private long _columnBitmask;
	private MeCategory _escapedModel;
}